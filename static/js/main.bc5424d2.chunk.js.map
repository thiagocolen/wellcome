{"version":3,"sources":["reducers/homeReducer.js","reducers/index.js","constants/actionTypes.js","store/configureStore.js","components/BgImage/index.js","components/SuperTitle/index.js","components/Weather/index.js","services/api.js","actions/actions.js","containers/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["initialState","randomPhoto","weather","rootReducer","combineReducers","homeReducer","state","action","console","log","payload","type","loaciton","location","urls","loggerMiddleware","createLogger","store","createStore","applyMiddleware","promiseMiddleware","thunkMiddleware","BgImage","imageUrl","imgCover","backgroundImage","Fragment","style","className","top","left","status","SuperTitle","title","WebFont","load","google","families","Weather","props","Array","isArray","weatherData","icon","src","alt","name","Api","getRandomPhoto","fetch","then","res","json","catch","err","getWeather","latitude","longitude","dispatch","Home","getGeolocation","navigator","geolocation","getCurrentPosition","position","actions","coords","this","regular","React","Component","connect","bindActionCreators","App","BrowserRouter","Route","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.bc5424d2.chunk.js","sourcesContent":["import * as types from '../constants/actionTypes'\r\n\r\nconst initialState = {\r\n    randomPhoto: {},\r\n    weather: {}\r\n  }\r\n\r\nexport default function todos(state = initialState, action) {\r\n  console.log('::', action.payload);\r\n  \r\n  switch (action.type) {\r\n\r\n    \r\n    case `${types.GET_RANDOM_PHOTO}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        randomPhoto: {\r\n          loaciton: { ...action.payload.location },\r\n          urls: { ...action.payload.urls }\r\n        }\r\n      }\r\n\r\n\r\n    case `${types.GET_WEATHER}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        weather: action.payload\r\n      }\r\n\r\n      \r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport homeReducer from '../reducers/homeReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  homeReducer\r\n})\r\n\r\nexport default rootReducer","export const GET_RANDOM_PHOTO = 'GET_RANDOM_PHOTO'\r\nexport const GET_WEATHER = 'GET_WEATHER'","import thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport promiseMiddleware from 'redux-promise-middleware'\r\nimport rootReducer from '../reducers'\r\n\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    promiseMiddleware(),\r\n    thunkMiddleware,\r\n    loggerMiddleware \r\n  )\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport RefreshIndicator from 'material-ui/RefreshIndicator'\r\nimport './styles.css'\r\n\r\nconst BgImage = ({ imageUrl }) => {\r\n\r\n  const imgCover = {\r\n    backgroundImage: `url(${ imageUrl })`,      \r\n  }\r\n\r\n  const RenderElement = () => {\r\n    if (imageUrl) {\r\n      return (\r\n        <React.Fragment>\r\n          <div style={ imgCover } className=\"imgCover\"></div>\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <RefreshIndicator\r\n          top={0}\r\n          left={0}\r\n          status=\"loading\" />\r\n      )\r\n    }\r\n  }\r\n\r\n  return <RenderElement /> \r\n}\r\n\r\n\r\nBgImage.propTypes = {\r\n  imageUrl: PropTypes.string\r\n}\r\n\r\nexport default BgImage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport WebFont from 'webfontloader'\r\nimport RefreshIndicator from 'material-ui/RefreshIndicator'\r\nimport './styles.css'\r\n\r\n\r\nconst SuperTitle = ({ title }) => {\r\n  \r\n  WebFont.load({\r\n    google: {\r\n      families: [\r\n        'Holtwood+One+SC',\r\n        'Roboto'\r\n      ]\r\n    }\r\n  })\r\n  \r\n  const RenderElement = () => {\r\n    \r\n\r\n    if (title) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"super-title\">\r\n            { title }\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <RefreshIndicator\r\n          top={0}\r\n          left={0}\r\n          status=\"loading\" />\r\n      )\r\n    }\r\n  }\r\n\r\n  return <RenderElement /> \r\n}\r\n\r\nSuperTitle.propTypes = {\r\n  title: PropTypes.string\r\n}\r\n\r\nexport default SuperTitle\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './styles.css'\r\n\r\n\r\nconst Weather = (props) => {\r\n\r\n    let country = ''\r\n\r\n    // let country = props.weatherData.sys ? props.weatherData.sys.country : ''\r\n\r\n    let imageUrl = ''\r\n    \r\n    if (Array.isArray(props.weatherData.weather)) {\r\n        imageUrl = `https://openweathermap.org/img/wn/${props.weatherData.weather[0].icon}.png`;\r\n    }\r\n\r\n    const RenderElement = () => {\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className=\"weather-icon\">\r\n                    <img src={ imageUrl } alt=\"weather icon\" />\r\n                    <p>{ props.weatherData.name }, { country }</p>\r\n                </div>\r\n\r\n            </React.Fragment>\r\n          )\r\n    }\r\n\r\n    return <RenderElement />\r\n}\r\n\r\n\r\nWeather.propTypes = {\r\n    imageUrl: PropTypes.string\r\n}\r\n  \r\nexport default Weather","\r\nclass Api {\r\n\r\n  \r\n  static getRandomPhoto = () => (\r\n    fetch('https://api.unsplash.com/photos/random/?client_id=7bb44829ebfb671742ab6f123c6581e0eca237754773b58d64940a82c82065f9')\r\n      .then(res => res.json())\r\n      .catch((err) => { \r\n        console.log('Error happened during fetching!', err)\r\n        return err\r\n      })\r\n  )\r\n\r\n\r\n  static getWeather = (latitude, longitude) => (\r\n    fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=89b5e7279338d44e816ac45c030ac220`)\r\n      .then(res => res.json())\r\n      .catch(err => console.log('Error happened during fetching!', err))\r\n  )\r\n\r\n}\r\n\r\nexport default Api","import * as types from '../constants/actionTypes'\r\nimport Api from '../services/api'\r\n\r\n\r\nexport const getRandomPhoto = () => (dispatch) => dispatch({\r\n  type: types.GET_RANDOM_PHOTO,\r\n  payload: Api.getRandomPhoto()\r\n})\r\n\r\n\r\nexport const getWeather = (latitude, longitude) => (dispatch) => dispatch({\r\n  type: types.GET_WEATHER,\r\n  payload: Api.getWeather(latitude, longitude)\r\n})","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n// CUSTOM COMPONENTS\r\nimport BgImage from '../../components/BgImage'\r\nimport SuperTitle from '../../components/SuperTitle'\r\nimport Weather from '../../components/Weather'\r\n\r\nimport * as actions from '../../actions/actions' \r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGeolocation()\r\n    this.props.actions.getRandomPhoto()\r\n    console.log('@@@@@:::::::::', this.props);\r\n    \r\n  }\r\n\r\n\r\n  getGeolocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.props.actions.getWeather(\r\n          position.coords.latitude,\r\n          position.coords.longitude\r\n        )\r\n      })\r\n    } else {\r\n      console.log('Geolocation is not supported by this browser.')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n\r\n        <Weather \r\n          weatherData={ this.props.weather } />\r\n\r\n        <SuperTitle title=\"THIAGO COLEN\"/>\r\n\r\n        <BgImage imageUrl={\r\n          this.props.randomPhoto.urls && \r\n          this.props.randomPhoto.urls.regular } />\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  randomPhoto: PropTypes.object,\r\n  weather: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  randomPhoto: state.homeReducer.randomPhoto,\r\n  weather: state.homeReducer.weather\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  actions: bindActionCreators(actions, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home)\r\n","import React from 'react'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/configureStore'\r\n\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\r\n\r\nimport Home from './containers/Home'\r\nimport './App.css'\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <MuiThemeProvider>\r\n          <BrowserRouter>\r\n            <React.Fragment>\r\n              <Route exact path=\"/\" component={Home}/> \r\n              <Route exact path=\"/wellcome\" component={Home}/> \r\n            </React.Fragment>\r\n          </BrowserRouter>\r\n        </MuiThemeProvider>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}