{"version":3,"sources":["reducers/homeReducer.js","reducers/index.js","constants/actionTypes.js","store/configureStore.js","components/BgImage/index.js","components/SuperTitle/index.js","services/api.js","actions/actions.js","containers/Home/index.js","App.js","registerServiceWorker.js","index.js"],"names":["initialState","randomPhoto","weather","rootReducer","combineReducers","homeReducer","state","action","type","loaciton","payload","location","urls","loggerMiddleware","createLogger","store","createStore","applyMiddleware","promiseMiddleware","thunkMiddleware","BgImage","imageUrl","imgCover","backgroundImage","Fragment","style","className","top","left","status","SuperTitle","title","WebFont","load","google","families","Api","getRandomPhoto","fetch","then","res","json","catch","err","console","log","getWeather","latitude","longitude","dispatch","Home","props","getGeolocation","navigator","geolocation","getCurrentPosition","position","actions","coords","this","regular","React","Component","connect","bindActionCreators","App","BrowserRouter","Route","exact","path","component","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9d294ef4.chunk.js","sourcesContent":["import * as types from '../constants/actionTypes'\r\n\r\nconst initialState = {\r\n    randomPhoto: {},\r\n    weather: {}\r\n  }\r\n\r\nexport default function todos(state = initialState, action) {\r\n  switch (action.type) {\r\n\r\n    \r\n    case `${types.GET_RANDOM_PHOTO}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        randomPhoto: {\r\n          loaciton: { ...action.payload.location },\r\n          urls: { ...action.payload.urls }\r\n        }\r\n      }\r\n\r\n\r\n    case `${types.GET_WEATHER}_FULFILLED`:\r\n      return {\r\n        ...state,\r\n        weather: action.payload\r\n      }\r\n\r\n      \r\n    default:\r\n      return state\r\n  }\r\n}","import { combineReducers } from 'redux'\r\nimport homeReducer from '../reducers/homeReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  homeReducer\r\n})\r\n\r\nexport default rootReducer","export const GET_RANDOM_PHOTO = 'GET_RANDOM_PHOTO'\r\nexport const GET_WEATHER = 'GET_WEATHER'","import thunkMiddleware from 'redux-thunk'\r\nimport { createLogger } from 'redux-logger'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport promiseMiddleware from 'redux-promise-middleware'\r\nimport rootReducer from '../reducers'\r\n\r\n\r\nconst loggerMiddleware = createLogger()\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    promiseMiddleware(),\r\n    thunkMiddleware,\r\n    loggerMiddleware \r\n  )\r\n)\r\n\r\nexport default store","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport RefreshIndicator from 'material-ui/RefreshIndicator'\r\nimport './styles.css'\r\n\r\nconst BgImage = ({ imageUrl }) => {\r\n\r\n  const imgCover = {\r\n    backgroundImage: `url(${ imageUrl })`,      \r\n  }\r\n\r\n  const RenderElement = () => {\r\n    if (imageUrl) {\r\n      return (\r\n        <React.Fragment>\r\n          <div style={ imgCover } className=\"imgCover\"></div>\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <RefreshIndicator\r\n          top={0}\r\n          left={0}\r\n          status=\"loading\" />\r\n      )\r\n    }\r\n  }\r\n\r\n  return <RenderElement /> \r\n}\r\n\r\n\r\nBgImage.propTypes = {\r\n  imageUrl: PropTypes.string\r\n}\r\n\r\nexport default BgImage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport WebFont from 'webfontloader'\r\nimport RefreshIndicator from 'material-ui/RefreshIndicator'\r\nimport './styles.css'\r\n\r\n\r\nconst SuperTitle = ({ title }) => {\r\n  \r\n  WebFont.load({\r\n    google: {\r\n      families: ['Holtwood+One+SC']\r\n    }\r\n  })\r\n  \r\n  const RenderElement = () => {\r\n    \r\n\r\n    if (title) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className=\"super-title\">\r\n            { title }\r\n          </div>\r\n        </React.Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <RefreshIndicator\r\n          top={0}\r\n          left={0}\r\n          status=\"loading\" />\r\n      )\r\n    }\r\n  }\r\n\r\n  return <RenderElement /> \r\n}\r\n\r\nSuperTitle.propTypes = {\r\n  title: PropTypes.string\r\n}\r\n\r\nexport default SuperTitle\r\n","\r\nclass Api {\r\n\r\n  \r\n  static getRandomPhoto = () => (\r\n    fetch('https://api.unsplash.com/photos/random/?client_id=7bb44829ebfb671742ab6f123c6581e0eca237754773b58d64940a82c82065f9')\r\n      .then(res => res.json())\r\n      .catch(err => console.log('Error happened during fetching!', err))\r\n  )\r\n\r\n\r\n  static getWeather = (latitude, longitude) => (\r\n    fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=89b5e7279338d44e816ac45c030ac220`)\r\n      .then(res => res.json())\r\n      .catch(err => console.log('Error happened during fetching!', err))\r\n  )\r\n\r\n}\r\n\r\nexport default Api","import * as types from '../constants/actionTypes'\r\nimport Api from '../services/api'\r\n\r\n\r\nexport const getRandomPhoto = () => (dispatch) => dispatch({\r\n  type: types.GET_RANDOM_PHOTO,\r\n  payload: Api.getRandomPhoto()\r\n})\r\n\r\n\r\nexport const getWeather = (latitude, longitude) => (dispatch) => dispatch({\r\n  type: types.GET_WEATHER,\r\n  payload: Api.getWeather(latitude, longitude)\r\n})","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { bindActionCreators } from 'redux'\r\nimport { connect } from 'react-redux'\r\n\r\n// CUSTOM COMPONENTS\r\nimport BgImage from '../../components/BgImage'\r\nimport SuperTitle from '../../components/SuperTitle'\r\n\r\nimport * as actions from '../../actions/actions' \r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGeolocation()\r\n    this.props.actions.getRandomPhoto()\r\n  }\r\n\r\n\r\n  getGeolocation = () => {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => {\r\n        this.props.actions.getWeather(\r\n          position.coords.latitude,\r\n          position.coords.longitude\r\n        )\r\n      })\r\n    } else {\r\n      console.log('Geolocation is not supported by this browser.')\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <React.Fragment>\r\n\r\n        <SuperTitle title=\"THIAGO COLEN\"/>\r\n\r\n        <BgImage imageUrl={\r\n          this.props.randomPhoto.urls && \r\n          this.props.randomPhoto.urls.regular } />\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nHome.propTypes = {\r\n  randomPhoto: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  randomPhoto: state.homeReducer.randomPhoto\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  actions: bindActionCreators(actions, dispatch)\r\n})\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home)\r\n","import React from 'react'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport { Provider } from 'react-redux'\r\nimport store from './store/configureStore'\r\n\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider'\r\n\r\nimport Home from './containers/Home'\r\nimport './App.css'\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <MuiThemeProvider>\r\n          <BrowserRouter>\r\n            <React.Fragment>\r\n              <Route exact path=\"/\" component={Home}/> \r\n            </React.Fragment>\r\n          </BrowserRouter>\r\n        </MuiThemeProvider>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport registerServiceWorker from './registerServiceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\nregisterServiceWorker()\r\n"],"sourceRoot":""}